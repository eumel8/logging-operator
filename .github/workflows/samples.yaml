# This workflow installs logging
# verify the samples

name: Sample Testing
on:
  push:
jobs:
  chart:
  name: Shell script tests with chart install
  runs-on: ubuntu-latest
  #needs: build
  strategy:
    fail-fast: false
    matrix:
      kube: ["1.26", "1.27", "1.28", "1.29", "1.30", "1.31"]

  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

    - name: Download artifact
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: controller
        path: /tmp

    - name: Load image
      run: |
        docker load --input /tmp/controller.tar
        docker image ls -a

    - name: Set up kubectl
      uses: azure/setup-kubectl@3e0aec4d80787158d308d7b364cb1b702e7feb7f # v4.0.0
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    # See https://github.com/kubernetes-sigs/kind/releases/tag/v0.20.0
    - name: Determine KinD node image version
      id: node_image
      run: |
        case ${{ matrix.kube }} in
          1.26)
            NODE_IMAGE=kindest/node:v1.26.6@sha256:6e2d8b28a5b601defe327b98bd1c2d1930b49e5d8c512e1895099e4504007adb ;;
          1.27)
            NODE_IMAGE=kindest/node:v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72 ;;
          1.28)
            NODE_IMAGE=kindest/node:v1.28.9@sha256:9ba4d311e7861d27b210e5960e5ce921a7c53d3c67e0545fd8a1cb9a76dfa2cb ;;
          1.29)
            NODE_IMAGE=kindest/node:v1.29.4@sha256:ea40a6bd365a17f71fd3883a1d34a0791d7d6b0eb75832c6d85b6f2326827f1e ;;
          1.30)
            NODE_IMAGE=kindest/node:v1.30.0@sha256:2af5d1b382926abcd6336312d652cd045b7cc47475844a608669c71b1fefcfbc ;;
          1.31)
            NODE_IMAGE=kindest/node:v1.31.0@sha256:53df588e04085fd41ae12de0c3fe4c72f7013bba32a20e7325357a1ac94ba865 ;;
          esac
          echo "image=$NODE_IMAGE" >> $GITHUB_OUTPUT
    - name: Make setup
      run: make kind-cluster stern
      env:
        KIND_IMAGE: ${{ steps.node_image.outputs.image }}
    - name: Check Cluster
      run: |
        kubectl get nodes
    - name: Setup Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        helm version
    - name: Install Log Generator & Logging Operator
      run: |
        helm repo add kube-logging https://kube-logging.github.io/helm-charts
        helm -n logging upgrade --install logging-operator kube-logging/logging-operator  --create-namespace
        helm upgrade --install log-generator kube-logging/log-generator --set app.golang=true
    - name: Check Pods
      run: |
        kubectl get pods -A
    - name: Check Log Generator
      run: |
        kubectl wait --for=condition=available deployments.apps/log-generator
        STATUS=$(kubectl get deployments.apps/log-generator -o jsonpath={.status.availableReplicas})
        if [[ $STATUS  -ne  1 ]]
        then
          echo "Log Generator failed"
          kubectl describe  deployments.apps/log-generator
          exit 1
        else
          echo "Log Generator OK"
        fi
        kubectl get pods -A
